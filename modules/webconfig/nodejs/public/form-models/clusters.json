{
  "general": [
    {
      "label": "Name",
      "type": "text",
      "model": "name",
      "required": true,
      "placeholder": "Input name"
    },
    {
      "label": "Discovery",
      "type": "dropdown-details",
      "customizable": true,
      "expanded": false,
      "group": "discovery",
      "model": "kind",
      "placeholder": "Choose discovery",
      "items": "discoveries",
      "tip": [
        "Discovery allows to discover remote nodes in grid."
      ],
      "details": {
        "Vm": [
          {
            "tableLabel": "Addresses",
            "label": "address",
            "type": "table-simple",
            "model": "addresses",
            "editIdx": -1,
            "placeholder": "IP address",
            "tip": [
              "Addresses may be represented as follows:",
              "<ul>",
              "    <li>IP address (e.g. 127.0.0.1, 9.9.9.9, etc);</li>",
              "    <li>IP address and port (e.g. 127.0.0.1:47500, 9.9.9.9:47501, etc);</li>",
              "    <li>IP address and port range (e.g. 127.0.0.1:47500..47510, 9.9.9.9:47501..47504, etc);</li>",
              "    <li>Hostname (e.g. host1.com, host2, etc);</li>",
              "    <li>Hostname and port (e.g. host1.com:47500, host2:47502, etc).</li>",
              "    <li>Hostname and port range (e.g. host1.com:47500..47510, host2:47502..47508, etc).</li>",
              "</ul>",
              "<p>",
              "If port is 0 or not provided then default port will be used (depends on",
              "discovery SPI configuration).",
              "<p>",
              "If port range is provided (e.g. host:port1..port2) the following should be considered:",
              "<ul>",
              "    <li>port1 < port2 should be true;</li>",
              "    <li>Both port1 and port2 should be greater than 0.</li>",
              "</ul>"
            ]
          }
        ],
        "Multicast": [
          {
            "label": "IP address",
            "type": "text",
            "model": "multicastGroup",
            "placeholder": "228.1.2.4",
            "tip": [
              "IP address of multicast group."
            ]
          },
          {
            "label": "Port number",
            "type": "text",
            "model": "multicastPort",
            "placeholder": "47400",
            "tip": [
              "Port number which multicast messages are sent to."
            ]
          },
          {
            "label": "Waits for reply ",
            "type": "text",
            "model": "responseWaitTime",
            "placeholder": "500",
            "tip": [
              "Time in milliseconds IP finder waits for reply to multicast address request."
            ]
          },
          {
            "label": "Attempts count",
            "type": "text",
            "model": "addressRequestAttempts",
            "placeholder": "2",
            "tip": [
              "Number of attempts to send multicast address request. ",
              "IP finder re-sends request only in case if no reply for previous request is received."
            ]
          },
          {
            "label": "Local address",
            "type": "text",
            "model": "localAddress",
            "tip": [
              "Local host address used by this IP finder.",
              "If provided address is non-loopback then multicast socket is bound to this interface.",
              "If local address is not set or is any local address then",
              "IP finder creates multicast sockets for all found non-loopback addresses"
            ]
          }
        ],
        "S3": [
          {
            "label": "Bucket name",
            "type": "text",
            "model": "bucketName",
            "placeholder": ""
          }
        ],
        "Cloud": [
          {
            "label": "Credential",
            "type": "text",
            "model": "credential",
            "placeholder": "",
            "tip": [
              "Credential that is used during authentication on the cloud.",
              "Depending on a cloud platform it can be a password or access key."
            ]
          },
          {
            "label": "Path to credential",
            "type": "text",
            "model": "credentialPath",
            "placeholder": "",
            "tip": [
              "Path to a credential that is used during authentication on the cloud.",
              "Access key or private key should be stored in a plain or PEM file without a passphrase."
            ]
          },
          {
            "label": "Identity",
            "type": "text",
            "model": "identity",
            "placeholder": "",
            "tip": [
              "Identity that is used as a user name during a connection to the cloud.",
              "Depending on a cloud platform it can be an email address, user name, etc."
            ]
          },
          {
            "label": "Provider",
            "type": "text",
            "model": "provider",
            "placeholder": "",
            "tip": [
              "Cloud provider to use."
            ]
          }
        ],
        "GoogleStorage": [
          {
            "label": "Project name",
            "type": "text",
            "model": "projectName",
            "placeholder": "",
            "tip": [
              "Google Cloud Platforms project name.",
              "Usually this is an auto generated project number (ex. 208709979073) that can be found in 'Overview' section of Google Developer Console."
            ]
          },
          {
            "label": "Bucket name",
            "type": "text",
            "model": "bucketName",
            "placeholder": "",
            "tip": [
              "Google Cloud Storage bucket name.",
              "If the bucket doesn't exist Ignite will automatically create it.",
              "However the name must be unique across whole Google Cloud Storage and Service Account Id must be authorized to perform this operation."
            ]
          },
          {
            "label": "Private key path",
            "type": "text",
            "model": "serviceAccountP12FilePath",
            "placeholder": "",
            "tip": [
              "Full path to the private key in PKCS12 format of the Service Account."
            ]
          },
          {
            "label": "Account id",
            "type": "text",
            "model": "accountId",
            "placeholder": "",
            "tip": [
              "Service account ID (typically an e-mail address)."
            ]
          }
        ],
        "Jdbc": [
          {
            "label": "DB schema should be initialized by Ignite",
            "type": "check",
            "model": "initSchema",
            "tip": [
              "Flag indicating whether DB schema should be initialized by Ignite or was explicitly created by user."
            ]
          }
        ],
        "SharedFs": [
          {
            "label": "File path",
            "type": "text",
            "model": "path",
            "placeholder": "disco/tcp"
          }
        ]
      }
    },
    {
      "label": "Caches",
      "type": "dropdown-multiple",
      "model": "caches",
      "placeholder": "Choose caches",
      "items": "caches",
      "tip": [
        "Select caches to start in cluster"
      ]
    }
  ],
  "advanced": [
    {
      "label": "Atomic configuration",
      "model": "atomicConfiguration",
      "fields": [
        {
          "label": "Backups",
          "type": "text",
          "model": "backups",
          "placeholder": "0",
          "tip": [
            "Number of backup nodes"
          ]
        },
        {
          "label": "Cache mode",
          "type": "dropdown",
          "model": "cacheMode",
          "placeholder": "PARTITIONED",
          "items": "cacheModes",
          "tip": [
            "Cache modes:",
            "<ul><li>Partitioned - in this mode the overall key set will be divided into partitions and all partitions will be split equally between participating nodes.</li>",
            "<li>Replicated - in this mode all the keys are distributed to all participating nodes.</li>",
            "<li>Local - in this mode caches residing on different grid nodes will not know about each other.</li></ul>"
          ]
        },
        {
          "label": "Sequence reserve",
          "type": "text",
          "model": "atomicSequenceReserveSize",
          "placeholder": "1,000",
          "tip": [
            "Default number of sequence values reserved for IgniteAtomicSequence instances.",
            "After a certain number has been reserved, consequent increments of sequence will happen locally, without communication with other nodes, until the next reservation has to be made."
          ]
        }
      ]
    },
    {
      "label": "Communication",
      "fields": [
        {
          "label": "Timeout",
          "type": "text",
          "model": "networkTimeout",
          "placeholder": "5,000",
          "tip": [
            "Maximum timeout in milliseconds for network requests."
          ]
        },
        {
          "label": "Send retry delay",
          "type": "text",
          "model": "networkSendRetryDelay",
          "placeholder": "1,000",
          "tip": [
            "Interval in milliseconds between message send retries."
          ]
        },
        {
          "label": "Send retry count",
          "type": "text",
          "model": "networkSendRetryCount",
          "placeholder": "3",
          "tip": [
            "Message send retries count."
          ]
        },
        {
          "label": "Segment check frequency",
          "type": "text",
          "model": "segmentCheckFrequency",
          "placeholder": "10,000",
          "tip": [
            "Network segment check frequency in milliseconds.",
            "If 0, periodic segment check is disabled and segment is checked only on topology changes (if segmentation resolvers are configured)."
          ]
        },
        {
          "label": "Wait for segment on start",
          "type": "check",
          "model": "waitForSegmentOnStart",
          "tip": [
            "Wait for segment on start flag.",
            "If enabled, node should wait for correct segment on start.",
            "If node detects that segment is incorrect on startup and enabled, node waits until segment becomes correct.",
            "If segment is incorrect on startup and disabled, exception is thrown."
          ]
        },
        {
          "label": "Discovery startup delay",
          "type": "text",
          "model": "discoveryStartupDelay",
          "placeholder": "600,000",
          "tip": [
            "This value is used to expire messages from waiting list whenever node discovery discrepancies happen."
          ]
        }
      ]
    },
    {
      "label": "Deployment",
      "fields": [
        {
          "label": "Mode",
          "type": "dropdown",
          "model": "deploymentMode",
          "placeholder": "SHARED",
          "items": "deploymentModes",
          "tip": [
            "Task classes and resources sharing mode."
          ]
        }
      ]
    },
    {
      "label": "Events",
      "fields": [
        {
          "label": "Include type",
          "type": "dropdown-multiple",
          "model": "includeEventTypes",
          "placeholder": "Choose recorded event types",
          "items": "events",
          "tip": [
            "Array of event types, which will be recorded by GridEventStorageManager#record(Event).",
            "Note, that either the include event types or the exclude event types can be established."
          ]
        }
      ]
    },
    {
      "label": "Marshaller",
      "fields": [
        {
          "label": "Marshal local jobs",
          "type": "check",
          "model": "marshalLocalJobs",
          "placeholder": "false",
          "tip": [
            "If this flag is enabled, jobs mapped to local node will be marshalled as if it was remote node."
          ]
        },
        {
          "label": "Keep alive time",
          "type": "text",
          "model": "marshCacheKeepAliveTime",
          "placeholder": "10,000"
        },
        {
          "label": "Pool size",
          "type": "text",
          "model": "marshCachePoolSize",
          "placeholder": "max(8, availableProcessors) * 2"
        }
      ]
    },
    {
      "label": "Metrics",
      "fields": [
        {
          "label": "Elapsed time",
          "type": "text",
          "model": "metricsExpireTime",
          "placeholder": "0",
          "tip": [
            "Time in milliseconds after which a certain metric value is considered expired."
          ]
        },
        {
          "label": "History size",
          "type": "text",
          "model": "metricsHistorySize",
          "placeholder": "10,000",
          "tip": [
            "Number of metrics kept in history to compute totals and averages."
          ]
        },
        {
          "label": "Log frequency",
          "type": "text",
          "model": "metricsLogFrequency",
          "placeholder": "60,000",
          "tip": [
            "Frequency of metrics log print out."
          ]
        },
        {
          "label": "Update frequency",
          "type": "text",
          "model": "metricsUpdateFrequency",
          "placeholder": "60,000",
          "tip": [
            "Job metrics update frequency in milliseconds.",
            "<p>",
            "If set to -1 job metrics are never updated.",
            "If set to 0 job metrics are updated on each job start and finish.",
            "Positive value defines the actual update frequency."
          ]
        }
      ]
    },
    {
      "label": "Peer Class Loading",
      "fields": [
        {
          "label": "Enable peer class loading",
          "type": "check",
          "model": "peerClassLoadingEnabled",
          "tip": [
            "Enables/disables peer class loading."
          ]
        },
        {
          "label": "Local class path exclude",
          "type": "text",
          "model": "peerClassLoadingLocalClassPathExclude",
          "placeholder": "[]",
          "tip": [
            "List of packages separated by comma from the system classpath that need to be peer-to-peer loaded from task originating node.",
            "'*' is supported at the end of the package name which means that all sub-packages and their classes are included like in Java package import clause."
          ]
        },
        {
          "label": "Missed resources cache size",
          "type": "text",
          "model": "peerClassLoadingMissedResourcesCacheSize",
          "placeholder": "100",
          "tip": [
            "If size greater than 0, missed resources will be cached and next resource request ignored.",
            "If size is 0, then request for the resource will be sent to the remote node every time this resource is requested."
          ]
        },
        {
          "label": "Pool size",
          "type": "text",
          "model": "peerClassLoadingThreadPoolSize",
          "placeholder": "availableProcessors",
          "tip": [
            "Thread pool size to use for peer class loading."
          ]
        }
      ]
    },
    {
      "label": "Time configuration",
      "fields": [
        {
          "label": "Samples size",
          "type": "text",
          "model": "clockSyncSamples",
          "placeholder": "8",
          "tip": [
            "Number of samples used to synchronize clocks between different nodes.",
            "Clock synchronization is used for cache version assignment in CLOCK order mode."
          ]
        },
        {
          "label": "Frequency",
          "type": "text",
          "model": "clockSyncFrequency",
          "placeholder": "120,000",
          "tip": [
            "frequency at which clock is synchronized between nodes, in milliseconds.",
            "Clock synchronization is used for cache version assignment in CLOCK order mode."
          ]
        },
        {
          "label": "Port base",
          "type": "text",
          "model": "timeServerPortBase",
          "placeholder": "31100",
          "tip": [
            "Time server provides clock synchronization between nodes.",
            "Base UPD port number for grid time server. Time server will be started on one of free ports in range."
          ]
        },
        {
          "label": "Port range",
          "type": "text",
          "model": "timeServerPortRange",
          "placeholder": "100",
          "tip": [
            "Time server port range."
          ]
        }
      ]
    },
    {
      "label": "Thread pools size",
      "fields": [
        {
          "label": "Public",
          "type": "text",
          "model": "publicThreadPoolSize",
          "placeholder": "max(8, availableProcessors) * 2",
          "tip": [
            "Thread pool that is in charge of processing ComputeJob, GridJobs and user messages sent to node."
          ]
        },
        {
          "label": "System",
          "type": "text",
          "model": "systemThreadPoolSize",
          "placeholder": "max(8, availableProcessors) * 2",
          "tip": [
            "Thread pool that is in charge of processing internal system messages."
          ]
        },
        {
          "label": "Management",
          "type": "text",
          "model": "managementThreadPoolSize",
          "placeholder": "4",
          "tip": [
            "Thread pool that is in charge of processing internal and Visor ComputeJob, GridJobs."
          ]
        },
        {
          "label": "Igfs",
          "type": "text",
          "model": "igfsThreadPoolSize",
          "placeholder": "availableProcessors",
          "tip": [
            "Thread pool that is in charge of processing outgoing IGFS messages."
          ]
        }
      ]
    },
    {
      "label": "Transactions",
      "model": "transactionConfiguration",
      "fields": [
        {
          "label": "Cache concurrency",
          "type": "dropdown",
          "model": "defaultTxConcurrency",
          "placeholder": "PESSIMISTIC",
          "items": "transactionConcurrency",
          "tip": [
            "Cache transaction concurrency to use when one is not explicitly specified."
          ]
        },
        {
          "label": "Isolation",
          "type": "dropdown",
          "model": "transactionIsolation",
          "placeholder": "REPEATABLE_READ",
          "items": "transactionIsolation",
          "tip": [
            "Default transaction isolation."
          ]
        },
        {
          "label": "Default timeout",
          "type": "text",
          "model": "defaultTxTimeout",
          "placeholder": "0",
          "tip": [
            "Default transaction timeout."
          ]
        },
        {
          "label": "Pessimistic log cleanup delay",
          "type": "text",
          "model": "pessimisticTxLogLinger",
          "placeholder": "10,000",
          "tip": [
            "Cache transaction concurrency to use when one is not explicitly specified."
          ]
        },
        {
          "label": "Pessimistic log size",
          "type": "text",
          "model": "pessimisticTxLogSize",
          "placeholder": "0",
          "tip": [
            "Cache transaction concurrency to use when one is not explicitly specified."
          ]
        },
        {
          "label": "Enable serializable cache transactions",
          "type": "check",
          "model": "txSerializableEnabled",
          "tip": [
            "Flag to enable/disable isolation level for cache transactions.",
            "Serializable level does carry certain overhead and if not used, should be disabled."
          ]
        }
      ]
    },
    {
      "label": "Segmentation",
      "fields": [
        {
          "label": "Policy",
          "type": "dropdown",
          "model": "segmentationPolicy",
          "placeholder": "STOP",
          "items": "segmentationPolicy"
        },
        {
          "label": "Resolve attempts count",
          "type": "text",
          "model": "segmentationResolveAttempts",
          "placeholder": "2",
          "tip": [
            "Each configured resolver will have this attempts number to pass segmentation check prior to check failure."
          ]
        },
        {
          "label": "All resolvers pass required flag",
          "type": "check",
          "model": "allSegmentationResolversPassRequired",
          "tip": [
            "All segmentation resolvers pass required flag.",
            "<p>",
            "If enabled all segmentation resolvers should succeed for node to be in correct segment.",
            "If disabled at least one segmentation resolver should succeed for node to be in correct segment."
          ]
        }
      ]
    },
    {
      "label": "Utility",
      "fields": [
        {
          "label": "Keep alive time",
          "type": "text",
          "model": "utilityCacheKeepAliveTime",
          "placeholder": "10,000",
          "tip": [
            "Keep alive time of thread pool that is in charge of processing utility cache messages."
          ]
        },
        {
          "label": "Pool size",
          "type": "text",
          "model": "utilityCachePoolSize",
          "placeholder": "max(8, availableProcessors) * 2",
          "tip": [
            "Thread pool that is in charge of processing utility cache messages."
          ]
        }
      ]
    }
  ]
}
